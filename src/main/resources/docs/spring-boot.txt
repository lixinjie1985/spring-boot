pom文件继承自父亲spring-boot-starter-parent，指定版本号1.5.9.RELEASE
可以声明一到多个starter，如spring-boot-starter-web，无需指定版本号
可以使用maven插件打成可执行jar包，spring-boot-maven-plugin，无需指定版本号

mvn dependency:tree，查看项目的依赖包
@EnableAutoConfiguration，告诉spring根据你添加的依赖包来猜测如何配置你的spring项目
因为spring-boot-starter-web会添加tomcat和springmvc，所以自动配置就假定你在开发一个web应用，就按web应用来给你配置
自动配置被设计为和starter一起工作，但也可以和自己在外面直接添加的jar包一起工作，完成自动配置
SpringApplication类引导我们的应用，并启动spring，再由spring来启动我们自动配置的tomcat，传递给run方法的那个.class告知它自己就是主spring组件
mvn spring-boot:run，从工程根目录启动应用
spring-boot-maven-plugin，可以用来创建可执行的jar包，包含编译后的class文件和所有依赖的jar包，以java -jar来运行该jar包

从spring-boot-starter-parent主要继承了java1.6的编译级别，UTF-8编码，spring-boot-dependencies依赖管理，资源过滤application.properties和application.yml
可以在pom中重写单个依赖的版本号，如下
<properties>
    <spring-data-releasetrain.version>Fowler-SR2</spring-data-releasetrain.version>
</properties>
13.2.2 也可以不从父亲继承

改变java版本，如下
<properties>
    <java.version>1.8</java.version>
</properties>

13.5 starter

包结构，主类位于root package，@EnableAutoConfiguration经常位于主类上，隐士的定义了一个base package用于扫描
使用root package，允许使用@ComponentScan而不用指定它的basePackage属性，也可以使用@SpringBootApplication

推荐使用基于java的配置，最好主类是一个@Configuration类，定义main方法的类通常是主@Configuration类很好的备选
不用把所有的配置放到一个@Configuration类中，可以使用@Import引入其它配置类，或使用@ComponentScan来扫描
可以在@Configuration类中使用@ImportResource加载xml配置文件
通过把@EnableAutoConfiguration或者@SpringBootApplication添加到主@Configuration类来开启自动配置
自动配置是非侵害的，一旦你定义了自己的配置，如添加DataSource bean，那么它将代替自动配置，
可以使用@EnableAutoConfiguration的exclude属性来禁用指定的自动配置，如@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
也可以使用excludeName属性指定一个类的全名来禁用该自动配置，也可以使用spring.autoconfigure.exclude property来控制被排除的自动配置类列表
spring bean和依赖注入，@ComponentScan，@Autowired，@Component，@Service，@Repository，@Controller
@SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan，一个顶三个，其中@EnableAutoConfiguration和@ComponentScan的属性还可以通过第一个来指定


20 spring-boot-devtools，这个开发工具使开发体验稍微好一些，在开发过程中会自动禁用cache，或者也可以在application.properties中禁用cache
当类路径里的文件改变时，会自动重启，也可以配置成禁用自动重启

把应用打成jar包用于生产环境，因为是自包含的，所以理想地适用于基于云的部署
24 外部的配置
24.1 配置随机数，RandomValuePropertySource，可产生integers，longs，uuids，strings，具体参考官方文档该章节
24.2 使用SpringApplication.setAddCommandLineProperties(false)禁止命令行参数添加到Environment中
24.3 spring从当前目录的/config子目录、当前目录、类路径中的/config包、类路径的根加载application.properties文件并把属性添加到Environment中
可以使用spring.config.name和spring.config.location定制该属性文件的名称和位置，由于这两个参数值使用的非常早来决定哪个文件被加载
所以它们只能定义在 OS env、system property、command line argument三者当中。所以该属性文件一共可以有六个位置，且优先级从高到低依次为
file:./custom-config/、classpath:custom-config/、file:./config/、file:./、classpath:/config/、classpath:/
可以使用优先级高的配置值去重写优先级地的配置值
24.4 除了application.properties之外，还有和profile相关的属性文件，如application-{profile}.properties，当没有profile被激活时
使用默认的profile属性文件application-default.properties，这些profile相关的属性文件也位于上面六个目录中，且优先级高
如果在spring.config.location里指定了文件，那么这些文件里和profile相关的变量将不会被考虑，如果想要被考虑的话
请在spring.config.location里指定目录，而不要指定文件
24.5 application.properties里也可以使用占位符${}，这些占位符的值来源于已经存在于Environment中的值，
24.6.1 使用YAML代替Properties，spring有两种方式可以加载YAML，YamlPropertiesFactoryBean加载YAML为Properties，YamlMapFactoryBean加载YAML为Map
具体参考官方文档的该章节，可以使用@ConfigurationProperties把一个YAML文档转换为一个类的对应属性
24.6.2 暴露YAML的属性到spring的Environment中，使用YamlPropertySourceLoader类进行暴露，就可以使用@Value来访问YAML属性
24.6.3 一个YAML文档中包含多个profile部分，具体参考官方文档的该章节
24.6.4 YAML文件不能使用@PropertySource注解来加载，properties文件可以
24.7 Type-safe Configuration Properties
24.7.1 第三方的配置，@ConfigurationProperties可以用在@Bean方法上，这样该bean从Environment中配置并被注册
24.7.3 外部属性在绑定到@ConfigurationProperties bean时会强制进行类型转换
24.7.4 @ConfigurationProperties的bean可以使用@Validated注解进行验证，具体参考官方文档的该章节

25 profile，可以使用@Profile来限制@Component或者@Configuration的加载，来达到不同环境加载不同组件的目的，只要当一个环境被激活时
spring.profiles.active=dev,hsqldb，对应该环境的组件就会被加载
25.1 可以使用spring.profiles.include添加更多的profile到当前的profile中，也可使用SpringApplication.setAdditionalProfiles()方法来设置额外的profile
也要当profile被激活时，所有额外的profile都会被激活，具体参考官方文档的该章节
25.2 可以使用SpringApplication.setAdditionalProfiles(…​)设置要激活的profile，可以使用ConfigurableEnvironment来激活profile
25.3 和profile相关的属性配置文件application-{profile}.properties

26 日志

27 开发web应用
27.1.1 如果想保持Spring Boot MVC特性，仅仅添加额外的mvc配置，那添加一个@Configuration标注的WebMvcConfigurerAdapter类
不要标注@EnableWebMvc注解。可以添加一个WebMvcRegistrationsAdapter类来提供对RequestMappingHandlerMapping，RequestMappingHandlerAdapter
ExceptionHandlerExceptionResolver的自定义。如果想完全的控制Spring MVC，可以同时添加@Configuration和@EnableWebMvc
27.1.2 使用Spring Boot的HttpMessageConverters来添加自定义的converters
27.1.3 为某个特定的类自定义JSON序列化器和反序列化器，具体参看官方文档的该章节
27.1.4 从数据绑定错误产生错误码来渲染错误消息，MessageCodesResolver，可参考官方文档了解更多
27.1.5 默认Spring Boot从类路径中或web根目录中的/static、/public、/resources、/META-INF/resources目录中查找静态内容
是使用来自springmvc的ResourceHttpRequestHandler，如果要修改这种行为的话可以添加WebMvcConfigurerAdapter类并重写
addResourceHandlers方法。使用spring.resources.static-locations来自定义静态资源位置或添加额外的静态资源位置
使用spring.mvc.static-path-pattern来定义访问静态资源的模式（路径模式），总体来说就是当访问一个静态资源的url时从什么地方
来查找这个静态资源（比如一个图片）
27.1.7 springmvc使用WebBindingInitializer来为一个特殊的请求初始化一个WebDataBinder，请创建一个ConfigurableWebBindingInitializer类的@Bean即可
27.1.9 统一异常处理，参考官方文档的该章节

30 NoSQL的使用，如redis
31 缓存，如redis
32 消息队列
34 验证
39 spring session，可以存储到多种介质中，如redis
41 测试
44 
66 maven插件来打包，可以打成可执行jar包，或可以部署的war包，具体参考官方文档的该章节

72.1.1 如果一些配置所需要的值恰好在maven的pom中出现，那就可以直接引用pom中的值，使用@..@这样的方式，如@project.build.sourceEncoding@
如果没有继承自父starter，则需进行简单配置，具体参考官方文档的该章节
72.2 可以把一些配置放到外面，如放到application.properties中，如spring.main.web-environment=false
72.3 改变外部属性的位置，不同来源（地方）配置的属性会按照一定的顺序添加到spring的Environment中，可以使用@PropertySource注解
来扩大或修改这种外部属性，那些被传进去的类，并且使用setSources()的方式被添加进去，会检查这些类是否有@PropertySources注解
如果有的话，这些属性会在容器启动过程中足够早的时候被添加到Environment中，然后可用于生命周期中的所有阶段，以这种方式添加的属性
具有较低的优先级，比application.properties、system properties、environment variables、the command line都低
可以通过在system properties、environment variables中设置spring.config.name来改变默认属性文件(application.properties)的名称
设置spring.config.location来改变默认位置(类路径)。application.properties就是一个单独的可以设置属性的源
它可以被system properties、environment variables、the command line重写
72.6 设置激活profile，可以通过在application.properties、system properties、environment variables、the command line设置spring.profiles.active=production
来激活生产环境，命令行如：$ java -jar -Dspring.profiles.active=production demo-0.0.1-SNAPSHOT.jar
也可以通过API的方式SpringApplicationBuilder.profiles()来设置
72.7 不同的环境选择不用的配置，application-${profile}.properties(多个配置文件)或者application.yml(一个文件里的多个部分)，具体参考官方文档的该章节

73.1.1 采用@Bean方式添加servlet、filter、listener等的注册，添加FilterRegistrationBean或ServletRegistrationBean来进行一些映射配置
73.1.2 使用@WebServlet, @WebFilter, 和@WebListener标记自定义的相应类，使用@Configuration和@ServletComponentScan来完成扫描和自动注册

74.5 文件上传，默认文件是1M，一个请求中文件总大小是10M

74.7 提供@Configuration和@EnableWebMvc，这要可以让你来完全控制MVC的配置，系统不再自动配置



